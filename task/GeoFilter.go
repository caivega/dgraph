// automatically generated by the FlatBuffers compiler, do not modify

package task

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GeoFilter struct {
	_tab flatbuffers.Table
}

func GetRootAsGeoFilter(buf []byte, offset flatbuffers.UOffsetT) *GeoFilter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GeoFilter{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GeoFilter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GeoFilter) Query() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GeoFilter) MutateQuery(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *GeoFilter) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GeoFilter) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GeoFilter) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GeoFilter) MaxDistance() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GeoFilter) MutateMaxDistance(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func GeoFilterStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GeoFilterAddQuery(builder *flatbuffers.Builder, query int8) {
	builder.PrependInt8Slot(0, query, 0)
}
func GeoFilterAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func GeoFilterStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GeoFilterAddMaxDistance(builder *flatbuffers.Builder, maxDistance uint32) {
	builder.PrependUint32Slot(2, maxDistance, 0)
}
func GeoFilterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
